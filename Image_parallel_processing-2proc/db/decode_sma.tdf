--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=15 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 16.1 cbx_cycloneii 2016:10:19:21:26:20:SJ cbx_lpm_add_sub 2016:10:19:21:26:20:SJ cbx_lpm_compare 2016:10:19:21:26:20:SJ cbx_lpm_decode 2016:10:19:21:26:20:SJ cbx_mgl 2016:10:19:22:10:30:SJ cbx_nadder 2016:10:19:21:26:20:SJ cbx_stratix 2016:10:19:21:26:20:SJ cbx_stratixii 2016:10:19:21:26:20:SJ  VERSION_END


-- Copyright (C) 2016  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_sma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[14..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[14..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode3915w[1..0]	: WIRE;
	w_anode3924w[3..0]	: WIRE;
	w_anode3941w[3..0]	: WIRE;
	w_anode3951w[3..0]	: WIRE;
	w_anode3961w[3..0]	: WIRE;
	w_anode3971w[3..0]	: WIRE;
	w_anode3981w[3..0]	: WIRE;
	w_anode3991w[3..0]	: WIRE;
	w_anode4001w[3..0]	: WIRE;
	w_anode4013w[1..0]	: WIRE;
	w_anode4020w[3..0]	: WIRE;
	w_anode4031w[3..0]	: WIRE;
	w_anode4041w[3..0]	: WIRE;
	w_anode4051w[3..0]	: WIRE;
	w_anode4061w[3..0]	: WIRE;
	w_anode4071w[3..0]	: WIRE;
	w_anode4081w[3..0]	: WIRE;
	w_anode4091w[3..0]	: WIRE;
	w_data3913w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[14..0] = eq_wire[14..0];
	eq_wire[] = ( ( w_anode4091w[3..3], w_anode4081w[3..3], w_anode4071w[3..3], w_anode4061w[3..3], w_anode4051w[3..3], w_anode4041w[3..3], w_anode4031w[3..3], w_anode4020w[3..3]), ( w_anode4001w[3..3], w_anode3991w[3..3], w_anode3981w[3..3], w_anode3971w[3..3], w_anode3961w[3..3], w_anode3951w[3..3], w_anode3941w[3..3], w_anode3924w[3..3]));
	w_anode3915w[] = ( (w_anode3915w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode3924w[] = ( (w_anode3924w[2..2] & (! w_data3913w[2..2])), (w_anode3924w[1..1] & (! w_data3913w[1..1])), (w_anode3924w[0..0] & (! w_data3913w[0..0])), w_anode3915w[1..1]);
	w_anode3941w[] = ( (w_anode3941w[2..2] & (! w_data3913w[2..2])), (w_anode3941w[1..1] & (! w_data3913w[1..1])), (w_anode3941w[0..0] & w_data3913w[0..0]), w_anode3915w[1..1]);
	w_anode3951w[] = ( (w_anode3951w[2..2] & (! w_data3913w[2..2])), (w_anode3951w[1..1] & w_data3913w[1..1]), (w_anode3951w[0..0] & (! w_data3913w[0..0])), w_anode3915w[1..1]);
	w_anode3961w[] = ( (w_anode3961w[2..2] & (! w_data3913w[2..2])), (w_anode3961w[1..1] & w_data3913w[1..1]), (w_anode3961w[0..0] & w_data3913w[0..0]), w_anode3915w[1..1]);
	w_anode3971w[] = ( (w_anode3971w[2..2] & w_data3913w[2..2]), (w_anode3971w[1..1] & (! w_data3913w[1..1])), (w_anode3971w[0..0] & (! w_data3913w[0..0])), w_anode3915w[1..1]);
	w_anode3981w[] = ( (w_anode3981w[2..2] & w_data3913w[2..2]), (w_anode3981w[1..1] & (! w_data3913w[1..1])), (w_anode3981w[0..0] & w_data3913w[0..0]), w_anode3915w[1..1]);
	w_anode3991w[] = ( (w_anode3991w[2..2] & w_data3913w[2..2]), (w_anode3991w[1..1] & w_data3913w[1..1]), (w_anode3991w[0..0] & (! w_data3913w[0..0])), w_anode3915w[1..1]);
	w_anode4001w[] = ( (w_anode4001w[2..2] & w_data3913w[2..2]), (w_anode4001w[1..1] & w_data3913w[1..1]), (w_anode4001w[0..0] & w_data3913w[0..0]), w_anode3915w[1..1]);
	w_anode4013w[] = ( (w_anode4013w[0..0] & data_wire[3..3]), enable_wire);
	w_anode4020w[] = ( (w_anode4020w[2..2] & (! w_data3913w[2..2])), (w_anode4020w[1..1] & (! w_data3913w[1..1])), (w_anode4020w[0..0] & (! w_data3913w[0..0])), w_anode4013w[1..1]);
	w_anode4031w[] = ( (w_anode4031w[2..2] & (! w_data3913w[2..2])), (w_anode4031w[1..1] & (! w_data3913w[1..1])), (w_anode4031w[0..0] & w_data3913w[0..0]), w_anode4013w[1..1]);
	w_anode4041w[] = ( (w_anode4041w[2..2] & (! w_data3913w[2..2])), (w_anode4041w[1..1] & w_data3913w[1..1]), (w_anode4041w[0..0] & (! w_data3913w[0..0])), w_anode4013w[1..1]);
	w_anode4051w[] = ( (w_anode4051w[2..2] & (! w_data3913w[2..2])), (w_anode4051w[1..1] & w_data3913w[1..1]), (w_anode4051w[0..0] & w_data3913w[0..0]), w_anode4013w[1..1]);
	w_anode4061w[] = ( (w_anode4061w[2..2] & w_data3913w[2..2]), (w_anode4061w[1..1] & (! w_data3913w[1..1])), (w_anode4061w[0..0] & (! w_data3913w[0..0])), w_anode4013w[1..1]);
	w_anode4071w[] = ( (w_anode4071w[2..2] & w_data3913w[2..2]), (w_anode4071w[1..1] & (! w_data3913w[1..1])), (w_anode4071w[0..0] & w_data3913w[0..0]), w_anode4013w[1..1]);
	w_anode4081w[] = ( (w_anode4081w[2..2] & w_data3913w[2..2]), (w_anode4081w[1..1] & w_data3913w[1..1]), (w_anode4081w[0..0] & (! w_data3913w[0..0])), w_anode4013w[1..1]);
	w_anode4091w[] = ( (w_anode4091w[2..2] & w_data3913w[2..2]), (w_anode4091w[1..1] & w_data3913w[1..1]), (w_anode4091w[0..0] & w_data3913w[0..0]), w_anode4013w[1..1]);
	w_data3913w[2..0] = data_wire[2..0];
END;
--VALID FILE
